
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import operator

import database
from exception import CustomizeException
from file_util import read_json, write_json

db = database.connectdb()

li = []
project = []
categories = []
api = {}

def data_group(li,step):
    li.sort()
    length = li[-1]//step
    if li[-1] % step > 0:
        length += 1
    length=int(round(length, 0))
    label_list = ['']*length
    value_list = [0]*length
    for i in range(length):
        # if step == 1:
        #     label_list[i] = str(i + 1)
        # else:
        #     label_list[i] = str(float(i * step)) + "-" + str(float((i + 1) * step))
        label_list[i] = str(float(i * step)) + "-" + str(float((i + 1) * step))
    li.sort()
    for num in li:
        index = num // step
        index = int(round(index, 0))
        # if step == 1:
        #     index -= 1
        if index == length:
            index -= 1
        if index < 0:
            print(str(num)+"  "+str(num // step)+"  "+str(int(round(num // step, 0))))
            continue
        value_list[index] += 1

    for i in range(len(value_list) - 1, -1, -1):
        if value_list[i] == 0:
            del value_list[i]
            del label_list[i]
    draw_bar(label_list, value_list)

def draw_bar(x_labels,y):
    index = np.arange(len(y))
    plt.bar(index, y, width=0.4, color='lightblue')

    x = range(len(x_labels))
    plt.xticks(x, x_labels, rotation=90)
    # plt.xticks(x, x_labels)
    # plt.ylabel("Java项目数量（个）")
    # plt.xlabel("第三方库数量")

    # plt.xlabel("Java项目数量")
    # plt.ylabel("第三方库数量（个）")

    # plt.ylabel("Java项目数量（个）")
    # plt.xlabel("Top category")

    # plt.xlabel("Java项目数量")
    # plt.ylabel("第三方库数量（个）")

    # plt.xlabel("第三方库更新延迟时间间隔（天）")
    # plt.ylabel("Java项目数量（个）")

    # plt.xlabel("第三方库更新延迟时间间隔（天）")
    # plt.ylabel("第三方库数量（个）")

    plt.xlabel("使用第三方库API占所有API的比例（%）")
    plt.ylabel("Java项目数量（个）")

    # plt.xlabel("被用到的API数量占所有API的比例（%）")
    # plt.ylabel("第三方库数量（个）")



    # plt.legend()
    for a, b in zip(index, y):
        plt.text(a, b + 0.05, '%.0f' % b, ha='center', va='bottom', fontsize=7)
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    plt.show()

def draw_barh(labels, value):
    index = np.arange(len(value))
    b=plt.barh(index, value, color='lightblue')

    y_ = range(len(labels))
    # plt.xticks(x, x_la
    # plt.ylabel("Java项目数量（个）")bels, rotation=60)
    plt.yticks(y_, labels)

    plt.xlabel("Java项目数量\n\nTesting Frameworks")
    # plt.ylabel("第三方库数量（个）")



    for rect in b:
        w = rect.get_width()
        plt.text(w, rect.get_y()+rect.get_height()/2, '%d' % int(w), ha='left', va='center', fontsize=7)
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    plt.show()

def draw_pie(labels,sizes):
    plt.figure(figsize=(6, 9))
    # 定义饼状图的标签，标签是列表
    # labels = [u'第一部分', u'第二部分', u'第三部分']
    # 每个标签占多大，会自动去算百分比
    # sizes = [60, 30, 10]
    colors = ['lightskyblue','royalblue','lightblue','lightseagreen']
    # 将某部分爆炸出来， 使用括号，将第一块分割出来，数值的大小是分割出来的与其他两块的间隙
    explode = (0, 0,0, 0)

    patches, l_text, p_text = plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                                      labeldistance=1.05, autopct='%3.1f%%', shadow=True,
                                      startangle=90, pctdistance=0.6)
    # labeldistance，文本的位置离远点有多远，1.1指1.1倍半径的位置
    # autopct，圆里面的文本格式，%3.1f%%表示小数有三位，整数有一位的浮点数
    # shadow，饼是否有阴影
    # startangle，起始角度，0，表示从0开始逆时针转，为第一块。一般选择从90度开始比较好看
    # pctdistance，百分比的text离圆心的距离
    # patches, l_texts, p_texts，为了得到饼图的返回值，p_texts饼图内部文本的，l_texts饼图外label的文本

    plt.axis('equal')
    plt.legend()
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    plt.title('第三方库在JAVA项目中的变更情况')
    # plt.title('第三方库在Java项目中是否存在更新情况的比例')
    # plt.title('Java项目中是否存在第三方库更新的比例')
    plt.show()

def read_project_id():
    project_id = read_json("project.txt")
    for id in project_id:
        project.append(int(id))
    # print(project)

def read_project_api_num():
    with open("C:\\Users\\yw\\Desktop\\num.txt", "r") as f:
        lines = f.readlines()
        for i in range(len(lines)):
            lines[i] = lines[i].strip('\n')
            # print(lines[i])
            num_info = lines[i].split(":")
            if len(num_info) != 2:
                raise (CustomizeException("len != 2"))
            api[num_info[0]] = num_info[1]
    # print(api[str(1)])


def project_library_rq1():
    read_project_id()
    usage_count = []
    for id in project:
        sql = "SELECT DISTINCT(library_id) FROM project_lib_usage WHERE project_id = " + str(id)
        usage_info = database.querydb(db, sql)
        usage_count.append(len(usage_info))
        if len(usage_info) == 732:
            print(id)
        # print(str(id)+" "+str(len(usage_info)))
    usage_count.sort()
    print(usage_count)
    # data_group(usage_count, 10)

def library_project_rq1():
    usage_count = read_json("pic.txt")
    data_group(usage_count, 2)
    # usage_count = []
    # count = 0
    # for id in range(8998):
    #     sql = "SELECT DISTINCT(project_id) FROM project_lib_usage WHERE library_id = " + str(id)
    #     usage_info = database.querydb(db, sql)
    #     count += len(usage_info)
    #     usage_count.append(len(usage_info))
    #     # print(len(usage_info))
    #     # print()
    # print(count)
    # write_json("pic.txt",usage_count)
    # data_group(usage_count, 5)

def top_category_rq1():
    usage_count = {}
    for i in range(177):
        sql = "SELECT DISTINCT(project_id) FROM project_lib_usage WHERE category_id = " + str(i)
        usage_info = database.querydb(db, sql)
        sql = "SELECT * FROM library_categories WHERE id = " + str(i)
        library_category = database.querydb(db, sql)
        if len(library_category) != 0:
            usage_count[library_category[0][1]] = len(usage_info)
        # print(len(usage_info))
        # print()

    sorted_usage = sorted(usage_count.items(), key=lambda d: d[1], reverse=True)
    sorted_usage = sorted_usage[:15]
    values = [value for key, value in sorted_usage]
    keys = [key for key, value in sorted_usage]
    print(sorted_usage)
    # for i in range(len(usage_count)):
    draw_bar(keys,values)

def top_library_rq1():
    usage_count = {}
    # name = ["JUnit","SLF4J API Module","Guava: Google Core Libraries For Java",
    # "Mockito Core","Jackson Databind",
    # "Apache Log4j","Apache Commons Codec",
    # "Logback Classic Module","Java Servlet API",
    # "Commons Lang","Joda Time",
    # "H2 Database Engine","AssertJ Fluent Assertions",
    #         "Apache Commons CLI","Jackson Annotations"]
    name = ["Jackson Annotations","Apache Commons CLI","AssertJ Fluent Assertions","H2 Database Engine","Joda Time","Commons Lang",
            "Java Servlet API","Logback Classic Module","Apache Commons Codec","Apache Log4j","Jackson Databind","Mockito Core",
            "Guava: Google Core Libraries For Java","SLF4J API Module","JUnit"]
    for i in range(177):
        sql = "SELECT DISTINCT(project_id) FROM project_lib_usage WHERE library_id = " + str(i)
        usage_info = database.querydb(db, sql)
        usage_count[i] = len(usage_info)
        # print(len(usage_info))
        # print()

    sorted_usage = sorted(usage_count.items(), key=lambda d: d[1], reverse=True)
    # sorted_usage = sorted(usage_count.items(), key = operator.itemgetter(1))
    sorted_usage = sorted_usage[:15]
    # sorted_usage.sort()
    values = [value for key, value in sorted_usage]
    keys = [key for key, value in sorted_usage]
    values.sort()
    print(values)
    draw_barh(name,values)

def library_project_category_rq1(id):
    # 3 Testing Frameworks
    # 12 Logging Frameworks
    # 6 Core Utilities
    # 9 Mocking
    # 10 JSON Libraries
    usage_count = []
    sql = "SELECT DISTINCT(library_id) FROM project_lib_usage WHERE category_id = " + str(id)
    libraries = database.querydb(db, sql)
    for library in libraries:
        # print(library[0])
        sql = "SELECT DISTINCT(project_id) FROM project_lib_usage WHERE library_id = " + str(library[0])
        usage_info = database.querydb(db, sql)
        usage_count.append(len(usage_info))
    print(usage_count)
    data_group(usage_count, 1)

def no_update_project_rq3():
    # read_project_id()
    # total = 0
    # count = 0
    # for id in project:
    #     total += 1
    #     sql = "SELECT * FROM lib_update WHERE project_id = " + str(id)
    #     usage_info = database.querydb(db, sql)
    #     if len(usage_info) == 0:
    #         count += 1
    # print(total)
    # print(count)
    # sizes = [count,total-count]
    sizes = [23, 247]
    labels = ["Not updated","Updated"]

    draw_pie(labels, sizes)

def no_update_library_rq3():
    total = 3452
    count = 0
    for i in range(3453):
        sql = "SELECT * FROM lib_update WHERE lib_id = " + str(i)
        usage_info = database.querydb(db, sql)
        if len(usage_info) == 0:
            count += 1
    print(total)
    print(count)
    sizes = [count,total-count]
    labels = ["Not updated","Updated"]

    draw_pie(labels, sizes)

def update_down_rq3():
    total = 2019
    count = 0

    # sql = "SELECT DISTINCT(lib_id) FROM lib_update WHERE prev_release_time_num != -1 and curr_release_time_num != -1 and prev_release_time_num > curr_release_time_num"
    # usage_info = database.querydb(db, sql)
    # if len(usage_info) != 0:
    #     for usage in usage_info:
    #         if usage[0] is not None:
    #             count += 1
    # print(total)
    # print(count)
    # print(total-count)
    # sizes = [count,total-count]
    sizes = [646, total - 646]
    labels = ["向下更新","向上更新"]

    draw_pie(labels, sizes)


def gap_by_project_rq3():
    # read_project_id()
    # gap_list = []
    # for id in project:
    #     count = 0
    #     total = 0
    #     sql = "SELECT * FROM lib_update WHERE project_id = " + str(id)
    #     gap_info = database.querydb(db, sql)
    #     if len(gap_info) != 0:
    #         for entry in gap_info:
    #             gap = entry[8]
    #             if gap is not None and gap > 0:
    #                 total += gap
    #                 count += 1
    #     if count > 0:
    #         gap_list.append(int(round(total/count/24, 0)))

    gap_list = [1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 6, 9, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 15, 15, 15, 15, 16, 16, 17, 18, 18, 19, 20, 20, 20, 20, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 27, 27, 27, 27, 28, 28, 30, 30, 31, 31, 31, 32, 32, 36, 37, 37, 38, 41, 42, 43, 44, 44, 45, 45, 45, 47, 48, 48, 50, 51, 52, 52, 53, 53, 54, 55, 57, 57, 58, 58, 58, 58, 58, 59, 60, 61, 61, 61, 62, 63, 64, 64, 66, 66, 66, 68, 70, 71, 71, 71, 72, 73, 75, 75, 76, 76, 76, 77, 79, 80, 81, 82, 83, 84, 85, 90, 92, 93, 93, 95, 101, 102, 106, 107, 110, 110, 112, 113, 114, 114, 115, 115, 119, 122, 123, 123, 124, 127, 129, 131, 133, 133, 134, 135, 143, 144, 145, 150, 150, 152, 154, 155, 162, 168, 170, 171, 172, 175, 180, 185, 186, 187, 188, 192, 192, 194, 201, 204, 217, 219, 219, 223, 223, 224, 225, 229, 232, 240, 247, 248, 252, 257, 258, 259, 274, 274, 279, 281, 293, 298, 299, 308, 317, 319, 325, 329, 330, 332, 334, 347, 353, 392, 393, 405, 429, 473, 482, 482, 490, 492, 502, 505, 514, 547, 554, 563, 596, 726, 753, 914, 1067, 1068, 1088, 1103, 1779]

    gap_list.sort()
    print(gap_list)
    print(len(gap_list))
    data_group(gap_list, 10)

def gap_by_library_rq3():
    # gap_list = []
    # for i in range(3453):
    #     count = 0
    #     total = 0
    #     sql = "SELECT * FROM lib_update WHERE lib_id = " + str(i)
    #     gap_info = database.querydb(db, sql)
    #     if len(gap_info) != 0:
    #         for entry in gap_info:
    #             gap = entry[8]
    #             if gap is not None and gap > 0:
    #                 total += gap
    #                 count += 1
    #         if count > 0:
    #             gap_list.append(int(round(total / count /24, 0)))
    gap_list = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 75, 75, 76, 76, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 87, 87, 88, 88, 88, 89, 89, 90, 90, 90, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 94, 95, 95, 95, 95, 95, 95, 96, 96, 96, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 100, 100, 100, 100, 101, 101, 101, 102, 102, 102, 103, 103, 103, 103, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 108, 108, 108, 109, 109, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 113, 113, 113, 113, 113, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 117, 117, 118, 119, 119, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 122, 122, 123, 124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 126, 127, 127, 127, 128, 128, 128, 128, 128, 129, 129, 129, 129, 130, 130, 130, 132, 132, 132, 132, 133, 133, 133, 133, 134, 134, 134, 135, 135, 136, 136, 136, 136, 137, 137, 137, 137, 138, 138, 139, 139, 140, 140, 140, 141, 141, 141, 141, 141, 142, 142, 143, 143, 143, 143, 143, 145, 145, 146, 146, 147, 147, 149, 149, 149, 150, 151, 152, 152, 152, 152, 152, 152, 153, 153, 154, 154, 154, 156, 158, 158, 160, 160, 161, 163, 163, 163, 164, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 166, 167, 168, 168, 169, 170, 170, 170, 170, 170, 170, 171, 171, 171, 173, 173, 173, 174, 174, 174, 174, 176, 176, 176, 176, 176, 177, 177, 177, 179, 179, 180, 180, 180, 181, 181, 181, 181, 181, 182, 182, 184, 184, 184, 185, 185, 185, 185, 185, 186, 186, 186, 187, 187, 187, 187, 188, 188, 188, 188, 189, 189, 189, 189, 191, 191, 193, 193, 194, 195, 196, 196, 198, 199, 200, 201, 201, 201, 202, 207, 208, 208, 208, 209, 209, 211, 212, 213, 216, 216, 216, 216, 216, 216, 217, 219, 220, 220, 220, 221, 221, 222, 222, 223, 223, 224, 228, 229, 229, 229, 230, 230, 231, 232, 234, 237, 238, 241, 241, 242, 243, 245, 245, 245, 246, 248, 252, 254, 254, 256, 257, 257, 257, 259, 261, 262, 263, 263, 265, 265, 268, 268, 269, 271, 274, 274, 276, 276, 277, 278, 278, 279, 279, 279, 280, 280, 283, 283, 284, 284, 287, 287, 290, 292, 294, 295, 295, 296, 298, 298, 299, 299, 302, 302, 304, 306, 308, 312, 313, 313, 313, 313, 313, 313, 314, 315, 315, 315, 318, 319, 319, 321, 321, 324, 325, 325, 328, 329, 330, 331, 335, 335, 336, 336, 336, 338, 338, 338, 338, 338, 338, 338, 339, 340, 340, 345, 345, 345, 346, 346, 349, 352, 353, 354, 356, 356, 359, 360, 361, 362, 362, 365, 366, 370, 373, 374, 375, 376, 376, 377, 378, 383, 385, 385, 387, 393, 396, 404, 406, 409, 412, 414, 415, 416, 427, 428, 430, 431, 434, 434, 434, 434, 438, 438, 440, 441, 444, 445, 446, 446, 449, 451, 456, 457, 458, 468, 472, 473, 478, 478, 480, 486, 491, 492, 496, 505, 506, 506, 511, 515, 515, 516, 518, 521, 529, 529, 537, 539, 556, 561, 566, 567, 582, 594, 595, 604, 610, 612, 617, 640, 654, 655, 659, 662, 668, 669, 678, 679, 696, 703, 705, 712, 717, 725, 732, 742, 744, 745, 749, 756, 757, 763, 763, 763, 763, 763, 780, 781, 807, 813, 813, 819, 821, 823, 826, 854, 863, 880, 895, 922, 932, 948, 948, 949, 964, 993, 995, 996, 1008, 1009, 1017, 1018, 1027, 1032, 1041, 1075, 1114, 1127, 1140, 1141, 1141, 1150, 1210, 1241, 1257, 1300, 1352, 1396, 1457, 1467, 1474, 1512, 1545, 1801, 1829, 1992, 2061, 2228, 2295, 2571, 2705, 2886, 3020, 3742]

    gap_list.sort()
    print(gap_list)
    print(len(gap_list))
    data_group(gap_list, 30)


def library_change_distribution_rq3():
    read_project_id()
    all_up = 0
    all_down = 0
    all_unchange = 0
    all_unknown = 0
    for id in project:
        up = 0
        down = 0
        unchange = 0
        unknown = 0
        print('------------'+str(id))
        sql = "SELECT DISTINCT (library_id) FROM project_lib_usage WHERE project_id = " + str(id)
        usage_info = database.querydb(db, sql)
        total = len(usage_info)
        print(total)
        for usage in usage_info:
            library_id = usage[0]
            sql = "SELECT * FROM lib_update WHERE lib_id = "+str(library_id)+" and curr_release_time_num != -1 and curr_time > curr_release_time_num and project_id = " + str(
                id)
            up_info = database.querydb(db, sql)
            if len(up_info) != 0:
                up += 1
                continue
            sql = "SELECT * FROM lib_update WHERE lib_id = " + str(
                library_id) + " and curr_release_time_num != -1 and curr_time < curr_release_time_num and project_id = " + str(
                id)
            down_info = database.querydb(db, sql)
            if len(down_info) != 0:
                down += 1
                continue
            sql = "SELECT * FROM lib_update WHERE lib_id = " + str(
                library_id) + " and curr_release_time_num = -1"
            unknown_info = database.querydb(db, sql)
            if len(unknown_info) != 0:
                unknown += 1
            else:
                unchange += 1
        print(up)
        print(down)
        print(unknown)
        print(unchange)
        all_up += up
        all_down += down
        all_unchange += unchange
        all_unknown += unknown
    print(all_up)
    print(all_down)
    print(all_unknown)
    print(all_unchange)
    # 4040
    # 39
    # 1810
    # 3523
    # sizes = [all_up, all_down, all_unchange, all_unknown]
    # sizes = [4040, 39, 1810,3523]
    labels = ["向上更新","向下更新","未知","未更新"]
    draw_pie(labels, sizes)

def project_percent_rq3():
    read_project_id()
    read_project_api_num()
    percent_count = []
    count = 0
    for id in project:
        # print("-------------"+str(id))
        total = 0
        sql = "SELECT * FROM api_call WHERE project_id = " + str(id)
        api_info = database.querydb(db, sql)
        if len(api_info) != 0:
            count +=1
            for api_call in api_info:
                num = api_call[3]
                total += num
            if str(id) in api:
                percent_count.append(total/int(api[str(id)])*100)
            # print(total)
            # print(api[str(id)])
            # print(total/int(api[str(id)])*100)
    print(count)
    percent_count.sort()
    print(percent_count)

    print(len(percent_count))

    data_group(percent_count, 1)

def library_percent_rq3():
    percent_count = []
    # for i in range(3453):
    #     total = 0
    #     sql = "SELECT distinct(api_id) FROM api_call WHERE lib_id = " + str(i)
    #     api_call = database.querydb(db, sql)
    #     if len(api_call) != 0:
    #         total += len(api_call)
    #         sql = "SELECT * FROM api_count WHERE lib_id = " + str(i)
    #         result = database.querydb(db, sql)
    #         if len(result) != 0 and result[0][2] != 0:
    #             print(total)
    #             percent_count.append(total / result[0][2] * 100)
    # percent_count.sort()
    percent_count =[0.001224394842848922, 0.0020055974401283583, 0.00228070975687634, 0.002707898941211514, 0.0037709976002742542,
     0.004784656290797739, 0.006822213125938055, 0.007323682347484315, 0.007422802850356295, 0.007980696104481396,
     0.008790049663780601, 0.009544413336726903, 0.010305825367789142, 0.010410315135111018, 0.011467276216104643,
     0.012795086686712302, 0.012904890953671441, 0.014057777465382724, 0.014586828094230907, 0.014767413241447206,
     0.014968939450639922, 0.014979029358897543, 0.015545330182813082, 0.0173337535455405, 0.018456995201181246,
     0.019338619222587505, 0.02005615724027276, 0.024443901246638963, 0.02457908320019663, 0.025171480712352902,
     0.026874496103198062, 0.026914278024491995, 0.026957169814312672, 0.027154543294524963, 0.02768549280177187,
     0.02789400278940028, 0.028989708653428033, 0.030199315482182406, 0.03156565656565657, 0.031713814537612586,
     0.03184170635668093, 0.03195909236177692, 0.033090039137529045, 0.03397893306150187, 0.034016550598072806,
     0.03417634996582365, 0.03429782988276378, 0.03522317403065825, 0.03530616327923645, 0.036374658987571994,
     0.037216226274655755, 0.03897116134060795, 0.0399480675122341, 0.040052067687994394, 0.041289043952187285,
     0.04142889598674275, 0.042444821731748725, 0.043655413271245634, 0.04437213429965981, 0.04573170731707318,
     0.04580852038479157, 0.0462326957624432, 0.04698144233027954, 0.048230806331389486, 0.04995004995004995,
     0.05003931660590464, 0.051440329218107, 0.051457975986277875, 0.05162356099323731, 0.0536480686695279,
     0.05465476407360175, 0.054764512595837894, 0.05586041468143134, 0.057116829220680634, 0.057937427578215524,
     0.05942947702060222, 0.06015037593984962, 0.061546036435253575, 0.0617974713142819, 0.06208480784751972,
     0.06276588325545714, 0.06494050611697672, 0.06494912318683697, 0.0652670510170782, 0.06551362683438156,
     0.06599152262747784, 0.06743088334457181, 0.06779661016949153, 0.07070469007777516, 0.07479431563201197,
     0.07530120481927711, 0.07574929895480534, 0.07614031316062919, 0.07761966364812418, 0.0779815199712264,
     0.08014425966740132, 0.08257638315441783, 0.08264462809917356, 0.08307126327656797, 0.08309788931361144,
     0.08417508417508417, 0.08568980291345331, 0.08644360825790705, 0.08664009703690868, 0.08665511265164644,
     0.08818342151675485, 0.08855154965211891, 0.08912655971479501, 0.09009009009009009, 0.0907715582450832,
     0.09099181073703368, 0.09161704076958314, 0.09195402298850575, 0.0931098696461825, 0.09343611305769679,
     0.09525451843092815, 0.09583245681696001, 0.09613741240813535, 0.09615384615384616, 0.09655250752541603,
     0.0992063492063492, 0.10175010175010174, 0.1023541453428864, 0.10420284821118443, 0.10499055085042347,
     0.1055572803477181, 0.10629251700680273, 0.10673985971332722, 0.10741138560687433, 0.1076194575979337,
     0.10775862068965517, 0.1089472493430098, 0.1108101452844127, 0.11177347242921014, 0.11339898537749925,
     0.1139195443218227, 0.11637748624629708, 0.11848341232227488, 0.11848857369379416, 0.11914217633042098,
     0.12040939193257075, 0.12042751768779167, 0.12212675011994592, 0.1224889759921607, 0.1249715973642354,
     0.12543116964565695, 0.12590494176896444, 0.12610340479192939, 0.12626262626262627, 0.1266825019794141,
     0.12740328932128794, 0.12756186750574028, 0.12836970474967907, 0.12894352273704118, 0.12944983818770225,
     0.13131976362442546, 0.13143071723619978, 0.13175230566534915, 0.13233572555606454, 0.13568521031207598,
     0.135985041645419, 0.13679890560875513, 0.13688951691247903, 0.136986301369863, 0.1372872048325096,
     0.13966480446927373, 0.14020329477742727, 0.14144271570014144, 0.14204545454545456, 0.14209591474245115,
     0.14391190088849956, 0.1440922190201729, 0.14461315979754158, 0.14532113588717363, 0.14641288433382138,
     0.14681506038361355, 0.14731879787860933, 0.1480932987782303, 0.15128593040847202, 0.15353121801432956,
     0.15552099533437014, 0.1567398119122257, 0.1568600111544897, 0.15712461946381223, 0.15823850245774695,
     0.1589825119236884, 0.15980823012385137, 0.16098738932116982, 0.16129032258064516, 0.16142050040355124,
     0.16286644951140067, 0.1631321370309951, 0.163265306122449, 0.16366612111292964, 0.16393442622950818,
     0.1675743611227482, 0.17041581458759372, 0.1707941929974381, 0.17211703958691912, 0.1728110599078341,
     0.17391304347826086, 0.17421602787456447, 0.17543859649122806, 0.17574692442882248, 0.17574692442882248,
     0.17654674565498843, 0.1769319051262433, 0.17736786094359702, 0.1813001813001813, 0.1817355747387551,
     0.18234865061998543, 0.18315018315018314, 0.18315018315018314, 0.18326965489392105, 0.19485903814262023,
     0.19494638974282072, 0.19648778091612426, 0.19782393669634024, 0.1984126984126984, 0.19924287706714486,
     0.19960079840319359, 0.1999703747592949, 0.20431417233114613, 0.2066115702479339, 0.20714655618850336,
     0.2079002079002079, 0.20833333333333334, 0.20844591986412414, 0.20882771713336498, 0.20907700152983175,
     0.21028891868828478, 0.21052631578947367, 0.21052631578947367, 0.21072796934865898, 0.211864406779661,
     0.2127659574468085, 0.21398002853067047, 0.21418261395911906, 0.2157497303128371, 0.21590500179920835,
     0.21602937999567942, 0.21645021645021645, 0.2186154355746936, 0.21893814997263275, 0.2196729314132292,
     0.21988761299780113, 0.22172949002217296, 0.22183314847237628, 0.22246941045606228, 0.2256063169768754,
     0.2270230684730868, 0.22751751763865863, 0.22764227642276422, 0.23052097740894423, 0.23201856148491878,
     0.23201856148491878, 0.23228803716608595, 0.23362955523046355, 0.2380080556572684, 0.2391772303276728,
     0.24005486968449932, 0.24342745861733206, 0.2445842068483578, 0.2447406790252031, 0.24803637866887143,
     0.24813895781637718, 0.24823135161970958, 0.24882499308819464, 0.25038520801232667, 0.2527379949452401,
     0.2528445006321113, 0.25359256128486896, 0.2561639449247518, 0.25773195876288657, 0.26052521884118385,
     0.26260504201680673, 0.26323871364015267, 0.26490066225165565, 0.267379679144385, 0.26785714285714285,
     0.2686108979278588, 0.26925953627524307, 0.26929982046678635, 0.27100271002710025, 0.2721471471471471,
     0.27548209366391185, 0.2785750464291744, 0.2801120448179272, 0.28073029016769885, 0.28312570781426954,
     0.28386013271145755, 0.2857142857142857, 0.2857142857142857, 0.2875227535992057, 0.287828947368421,
     0.2881844380403458, 0.2881844380403458, 0.28899107581017464, 0.2890173410404624, 0.28977108084613157,
     0.28998778998779, 0.2913025384935497, 0.29222676797194624, 0.2935557522948605, 0.29411764705882354,
     0.2952503209242619, 0.29782481518906556, 0.30055817947617003, 0.3011040481766477, 0.30120481927710846,
     0.3028009084027252, 0.30285003515223624, 0.303951367781155, 0.3044561306393579, 0.30651340996168586,
     0.30959752321981426, 0.310049243115083, 0.3108348134991119, 0.3108486167236556, 0.31512605042016806,
     0.31545741324921134, 0.31645569620253167, 0.31789282470481384, 0.3232062055591467, 0.32573289902280134,
     0.3258845437616387, 0.3286770747740345, 0.3289473684210526, 0.3303055326176713, 0.3329801725442712,
     0.3338519014796225, 0.3380135205408216, 0.3389830508474576, 0.3392568659127625, 0.3424453576320648,
     0.3436426116838488, 0.34423407917383825, 0.3447057636014939, 0.3454231433506045, 0.34602076124567477,
     0.3467706978760295, 0.34713293905888404, 0.34965034965034963, 0.3507324118011141, 0.35118525021949076,
     0.35232448225487667, 0.35431429762401, 0.35629453681710216, 0.35714285714285715, 0.35714285714285715,
     0.35842293906810035, 0.36209710322317423, 0.3622178879910839, 0.36231884057971014, 0.3645433614735226,
     0.3669724770642202, 0.3676470588235294, 0.3703703703703704, 0.3731343283582089, 0.3747323340471092,
     0.37523452157598497, 0.37641154328732745, 0.3780718336483932, 0.38022813688212925, 0.38137727567100815,
     0.38461538461538464, 0.38643129943163024, 0.3878975950349108, 0.38910505836575876, 0.3891539040923927,
     0.3927729772191673, 0.394871318405649, 0.398406374501992, 0.398406374501992, 0.3988300983780909, 0.4,
     0.4045996592844974, 0.40539907203449405, 0.4070378151260505, 0.4076878276062901, 0.40885860306643956,
     0.4091910607491344, 0.410612760581175, 0.412903848939972, 0.4132231404958678, 0.4132231404958678,
     0.4163197335553705, 0.41841004184100417, 0.4184596242010384, 0.42081101759755163, 0.4223369310183012,
     0.422654268808115, 0.4248088360237893, 0.425531914893617, 0.4258517034068136, 0.426782622700004,
     0.42689434364994666, 0.429053641872382, 0.4320276497695853, 0.43213423744397195, 0.43227665706051877,
     0.43231961836613003, 0.43499275012083133, 0.4357298474945534, 0.43851053405193535, 0.43859649122807015,
     0.441696113074205, 0.44283413848631237, 0.4434589800443459, 0.4436041015198895, 0.444652468991341,
     0.4464285714285714, 0.4464285714285714, 0.4466614501825769, 0.4497968659315148, 0.45555780522372946,
     0.4576659038901602, 0.45977011494252873, 0.4608294930875576, 0.46439628482972134, 0.4655833485484755,
     0.4693261816962789, 0.4697400043696745, 0.4716981132075472, 0.4761904761904762, 0.47675804529201427,
     0.4774305555555556, 0.47963580196731975, 0.4830917874396135, 0.48455481526347666, 0.48622366288492713,
     0.48768976638086997, 0.49019607843137253, 0.49071618037135284, 0.49335863377609107, 0.49552816050277976,
     0.49583911234396666, 0.4965597390420095, 0.4975124378109453, 0.4981884057971014, 0.4998333888703766, 0.5,
     0.5008904719501336, 0.5031446540880503, 0.5084082909659757, 0.5089408528198074, 0.5097596847200605,
     0.5099302200751477, 0.5115574081091322, 0.5131494547787042, 0.5137503777576307, 0.516795865633075,
     0.5194805194805194, 0.5199306759098787, 0.5202312138728323, 0.5221321695760599, 0.5225653206650831,
     0.5235602094240838, 0.5235602094240838, 0.5291005291005291, 0.5298481102084069, 0.5405405405405406,
     0.541823623509985, 0.5421033610408384, 0.544959128065395, 0.5455962587685114, 0.546448087431694,
     0.5467800729040098, 0.5494505494505495, 0.5503299787322677, 0.5586592178770949, 0.5593536357986327,
     0.5617977528089888, 0.5632291806356443, 0.565171317555634, 0.5679052409540808, 0.5681818181818182,
     0.5747126436781609, 0.5774278215223096, 0.5776636713735559, 0.5796010538200979, 0.5813953488372093,
     0.5813953488372093, 0.5845511482254697, 0.5847838842167026, 0.5847953216374269, 0.586756077116513,
     0.5879024578738907, 0.5882352941176471, 0.5899705014749262, 0.5920734654422426, 0.5941247662009022,
     0.5947037701974865, 0.596217105263158, 0.5976095617529881, 0.6002400960384154, 0.60790273556231, 0.60790273556231,
     0.60882800608828, 0.6097560975609756, 0.6110837957434853, 0.6134969325153374, 0.6157635467980296,
     0.6187326648175806, 0.6219227779217413, 0.6237006237006237, 0.624126688402422, 0.625, 0.625, 0.6254767353165522,
     0.628930817610063, 0.6309148264984227, 0.6345177664974619, 0.6355932203389831, 0.6377308204835331,
     0.6389776357827476, 0.641025641025641, 0.641399416909621, 0.6419608987452583, 0.6432591798445457,
     0.645546273190843, 0.6463527239150507, 0.6479481641468683, 0.6578947368421052, 0.6587615283267457,
     0.6643046944198405, 0.6650704974727321, 0.6666666666666667, 0.6711409395973155, 0.6735751295336788,
     0.6743355811186037, 0.6746626686656672, 0.6754728309816872, 0.6756756756756757, 0.6756756756756757, 0.677490234375,
     0.6798516687268232, 0.682261208576998, 0.68359375, 0.6846910112359551, 0.684931506849315, 0.6944444444444444,
     0.6944444444444444, 0.6947124662292551, 0.6963788300835655, 0.6968641114982579, 0.69713400464756,
     0.698434870948284, 0.6993006993006993, 0.7001166861143524, 0.7002967359050445, 0.7007007007007007, 0.7011393514461,
     0.7012622720897616, 0.7067137809187279, 0.7130124777183601, 0.7163323782234957, 0.7246376811594203,
     0.7272727272727273, 0.7289840361723724, 0.7367196587824738, 0.7393498415678911, 0.739930745398214,
     0.7416267942583732, 0.7453385792136067, 0.7460536005891582, 0.7462686567164178, 0.7495429616087752,
     0.7504078303425775, 0.7536231884057971, 0.7551240560949299, 0.76103500761035, 0.7617728531855956,
     0.7628294036061026, 0.7633587786259541, 0.7667473769168685, 0.7670182166826461, 0.7751937984496124,
     0.7782101167315175, 0.7796376977757394, 0.7802340702210664, 0.7814065317571629, 0.7816862088218872,
     0.795593635250918, 0.7980845969672785, 0.799855393375209, 0.8042895442359249, 0.8088978766430739,
     0.8106116433308769, 0.8130081300813009, 0.8148148148148148, 0.8152173913043478, 0.8163265306122449,
     0.8163265306122449, 0.81799591002045, 0.8225616921269095, 0.825082508250825, 0.8255563531945441,
     0.8289703315881327, 0.8301707779886147, 0.8323424494649228, 0.8343034536282499, 0.8403361344537815,
     0.8403361344537815, 0.8403361344537815, 0.8448855713231072, 0.8460236886632826, 0.8520526723470179,
     0.8547008547008548, 0.8552049542907697, 0.8553654743390358, 0.8607746972275048, 0.8611007113440659,
     0.8620689655172413, 0.8689839572192514, 0.8695652173913043, 0.8695652173913043, 0.8712487899322363,
     0.872093023255814, 0.876658955314745, 0.8766675741900354, 0.8771929824561403, 0.8771929824561403,
     0.8774703557312253, 0.8782201405152225, 0.8784377322792081, 0.8849557522123894, 0.9035172636334301,
     0.9090909090909091, 0.9151013617058541, 0.92057761732852, 0.9216589861751152, 0.9283551967709384,
     0.9354997538158543, 0.9380863039399625, 0.9389671361502347, 0.9422850412249705, 0.9433962264150944,
     0.9433962264150944, 0.9463722397476341, 0.9463841339265515, 0.949367088607595, 0.9523809523809524,
     0.9544692377144331, 0.9556907037358819, 0.9569377990430622, 0.9608665269042628, 0.9693053311793215,
     0.9771287447653817, 0.9779951100244498, 0.9790209790209791, 0.9791921664626682, 0.9798865394533264,
     0.9803921568627451, 0.9803921568627451, 0.9803921568627451, 0.9831460674157303, 0.9836065573770493,
     0.9852216748768473, 0.9868421052631579, 0.9868421052631579, 0.988593155893536, 0.9891196834817012,
     0.9925558312655087, 1.0016977928692699, 1.0081112398609502, 1.0095911155981827, 1.0101010101010102,
     1.0110294117647058, 1.0155721056194988, 1.020545789686643, 1.0245901639344261, 1.0285511615534668,
     1.0309278350515463, 1.0341643582640814, 1.0392609699769053, 1.0403120936280885, 1.0404624277456647,
     1.0412147505422993, 1.0416666666666665, 1.0416666666666665, 1.0416666666666665, 1.046403992433694,
     1.0465116279069768, 1.0471204188481675, 1.0471204188481675, 1.0484273589615578, 1.0526315789473684,
     1.0554089709762533, 1.0596026490066226, 1.0723860589812333, 1.0727969348659003, 1.0769230769230769,
     1.0844892812105928, 1.0869565217391304, 1.098901098901099, 1.1004448606883634, 1.103309929789368,
     1.1046133853151396, 1.1049723756906076, 1.1049723756906076, 1.1049723756906076, 1.1235955056179776,
     1.1267605633802817, 1.1320754716981132, 1.1363636363636365, 1.1363636363636365, 1.141552511415525,
     1.1428571428571428, 1.146788990825688, 1.1478730587440917, 1.1494252873563218, 1.1521843494959194,
     1.1577424023154848, 1.1764705882352942, 1.1784511784511784, 1.1802891708468575, 1.2048192771084338,
     1.208791208791209, 1.2303906490310674, 1.2433392539964476, 1.25, 1.256544502617801, 1.2620508326029798,
     1.2650602409638554, 1.2658227848101267, 1.2658227848101267, 1.2658227848101267, 1.2658227848101267,
     1.2659739639316854, 1.2684989429175475, 1.2687427912341407, 1.272984441301273, 1.282051282051282,
     1.282051282051282, 1.282051282051282, 1.2850862360500508, 1.293103448275862, 1.2939001848428837, 1.294990272373541,
     1.2987012987012987, 1.2987012987012987, 1.3045434098065678, 1.3045434098065678, 1.3215859030837005,
     1.3254786450662739, 1.3333333333333335, 1.3353317890720806, 1.3605442176870748, 1.3623978201634876,
     1.3679544015199492, 1.36986301369863, 1.383399209486166, 1.3852587558808156, 1.3888888888888888,
     1.3898080741230974, 1.400560224089636, 1.4035087719298245, 1.4084507042253522, 1.413760603204524,
     1.4144271570014144, 1.4188903007200337, 1.4227642276422763, 1.4285714285714286, 1.4285714285714286,
     1.4285714285714286, 1.4294592914853945, 1.4315604008369123, 1.4326107445805842, 1.4354066985645932,
     1.4492753623188406, 1.465201465201465, 1.4694201747418585, 1.4705882352941175, 1.4858841010401187, 1.5,
     1.5037593984962405, 1.5037593984962405, 1.5053763440860215, 1.5126050420168067, 1.5151515151515151,
     1.5302955053389622, 1.537042729787888, 1.5384615384615385, 1.557377049180328, 1.5594541910331383, 1.5625,
     1.5721120984278878, 1.5725518227305217, 1.5810276679841897, 1.5827338129496402, 1.5843429636533086,
     1.5873015873015872, 1.5873015873015872, 1.5873015873015872, 1.5873015873015872, 1.590380139643134,
     1.6064257028112447, 1.606805293005671, 1.618705035971223, 1.6194331983805668, 1.6197026847126692,
     1.6233766233766231, 1.6281062553556127, 1.6309887869520898, 1.6320474777448073, 1.6385424309122036,
     1.639344262295082, 1.6414585531715324, 1.6424510423247, 1.646090534979424, 1.6611295681063125, 1.6784155756965426,
     1.694915254237288, 1.744186046511628, 1.7462165308498252, 1.7543859649122806, 1.7543859649122806,
     1.7543859649122806, 1.7543859649122806, 1.7557251908396947, 1.7605633802816902, 1.7699115044247788,
     1.7825311942959003, 1.8072289156626504, 1.8087855297157622, 1.8105849582172702, 1.8181818181818181,
     1.8181818181818181, 1.82648401826484, 1.8315018315018317, 1.8382352941176472, 1.8518518518518516,
     1.8530774321641297, 1.8682399213372665, 1.880192391779624, 1.8927444794952681, 1.9001755468045736,
     1.9047619047619049, 1.910828025477707, 1.9236549443943491, 1.9285714285714284, 1.9301470588235294,
     1.9448946515397085, 1.9491985873403967, 1.9534883720930232, 1.9607843137254901, 1.9607843137254901,
     1.9607843137254901, 1.977401129943503, 1.9801980198019802, 1.998019980199802, 2.0, 2.0, 2.0202020202020203,
     2.0224719101123596, 2.0253164556962027, 2.0289855072463765, 2.0408163265306123, 2.0408163265306123,
     2.051282051282051, 2.0524515393386547, 2.0637898686679175, 2.0648967551622417, 2.083333333333333,
     2.0865533230293662, 2.0964360587002098, 2.099737532808399, 2.1184139054861486, 2.132701421800948,
     2.142128527711663, 2.1505376344086025, 2.1586303862376974, 2.1615779519048908, 2.170767004341534,
     2.1739130434782608, 2.1739130434782608, 2.1739130434782608, 2.1739130434782608, 2.176541717049577,
     2.1928009929664873, 2.193308550185874, 2.197802197802198, 2.197802197802198, 2.2006264557063693, 2.204724409448819,
     2.2154316271963332, 2.2222222222222223, 2.2222222222222223, 2.2231890363280398, 2.2388059701492535,
     2.243713733075435, 2.2465088038858534, 2.249134948096886, 2.2494887525562373, 2.2522522522522523,
     2.2608695652173916, 2.272727272727273, 2.272727272727273, 2.294455066921606, 2.3255813953488373,
     2.3466145196773405, 2.3529411764705883, 2.358490566037736, 2.364394993045897, 2.3803083581282123,
     2.4024024024024024, 2.403846153846154, 2.4096385542168677, 2.4096385542168677, 2.4096385542168677,
     2.4122807017543857, 2.41884150222788, 2.4193548387096775, 2.4251069900142657, 2.4283870967741934,
     2.4308466051969826, 2.4369016536118364, 2.445302445302445, 2.4487094639311717, 2.4490440827934905,
     2.450980392156863, 2.450980392156863, 2.4539877300613497, 2.459016393442623, 2.459016393442623, 2.4691358024691357,
     2.4691358024691357, 2.4691358024691357, 2.5, 2.5, 2.5, 2.5316455696202533, 2.5316455696202533, 2.5390625,
     2.5423728813559325, 2.5423728813559325, 2.564102564102564, 2.564102564102564, 2.5746652935118437,
     2.578268876611418, 2.5889967637540456, 2.5974025974025974, 2.6058631921824107, 2.608695652173913,
     2.631578947368421, 2.631578947368421, 2.631578947368421, 2.6490066225165565, 2.6548672566371683, 2.666666666666667,
     2.6802218114602585, 2.6948318720292885, 2.7027027027027026, 2.724177071509648, 2.7303754266211606,
     2.73576512455516, 2.7522935779816518, 2.7777777777777777, 2.7777777777777777, 2.797202797202797, 2.797778234931084,
     2.8169014084507045, 2.824858757062147, 2.8368794326241136, 2.843601895734597, 2.88659793814433, 2.9019098831819026,
     2.912621359223301, 2.9166666666666665, 2.925531914893617, 2.9307909604519775, 2.941176470588235, 2.944613227389577,
     2.9629629629629632, 2.9633933759442184, 2.972027972027972, 2.976190476190476, 2.9778569610587935,
     2.9783950617283947, 2.9850746268656714, 2.9914529914529915, 3.004291845493562, 3.007518796992481,
     3.008945513689347, 3.023758099352052, 3.0280649926144756, 3.0303030303030303, 3.0303030303030303,
     3.044681692368525, 3.0534351145038165, 3.0626780626780628, 3.0737704918032787, 3.10077519379845,
     3.1372549019607843, 3.1578947368421053, 3.1746031746031744, 3.1776600866634572, 3.1835205992509366,
     3.1914893617021276, 3.225806451612903, 3.2279206947402916, 3.309156844968268, 3.3333333333333335,
     3.3333333333333335, 3.389830508474576, 3.389830508474576, 3.389830508474576, 3.4246575342465753,
     3.4341363403382883, 3.4482758620689653, 3.4482758620689653, 3.508771929824561, 3.512396694214876,
     3.5211267605633805, 3.522205206738132, 3.5278154681139755, 3.5319010416666665, 3.571428571428571,
     3.592814371257485, 3.592814371257485, 3.6363636363636362, 3.6419332879509874, 3.64963503649635, 3.6585365853658534,
     3.7012987012987013, 3.7037037037037033, 3.7037037037037033, 3.7103263299061244, 3.7387017255546424,
     3.7735849056603774, 3.7735849056603774, 3.7765334027868214, 3.7869062901155326, 3.787878787878788,
     3.8410596026490067, 3.8432554634513942, 3.8461538461538463, 3.8461538461538463, 3.875968992248062,
     3.875968992248062, 3.887113951011715, 3.9145907473309607, 3.9215686274509802, 3.954802259887006,
     3.9735099337748347, 4.0, 4.0, 4.025974025974026, 4.056375025257627, 4.069767441860465, 4.081632653061225,
     4.093097913322633, 4.108934543717153, 4.114873553364767, 4.1195716835217135, 4.149377593360995, 4.15929203539823,
     4.166666666666666, 4.166666666666666, 4.207285787583376, 4.216867469879518, 4.224058769513315, 4.25531914893617,
     4.273504273504273, 4.284103720405862, 4.310344827586207, 4.338842975206612, 4.3478260869565215, 4.3478260869565215,
     4.368932038834951, 4.368932038834951, 4.444444444444445, 4.463040446304045, 4.545454545454546, 4.545454545454546,
     4.545454545454546, 4.597701149425287, 4.62962962962963, 4.705882352941177, 4.744525547445255, 4.752465434362456,
     4.761904761904762, 4.761904761904762, 4.802744425385934, 4.807692307692308, 4.81283422459893, 4.841402337228715,
     4.864864864864865, 4.87062404870624, 4.887983706720977, 4.8903878583473865, 4.918032786885246, 4.964539007092199,
     5.0018122508155125, 5.014161334312388, 5.016722408026756, 5.080693365212194, 5.112474437627812, 5.128205128205128,
     5.128205128205128, 5.128205128205128, 5.241935483870968, 5.263157894736842, 5.263157894736842, 5.263157894736842,
     5.263157894736842, 5.291005291005291, 5.3097345132743365, 5.319148936170213, 5.329719963866306, 5.369127516778524,
     5.369127516778524, 5.426356589147287, 5.442176870748299, 5.46448087431694, 5.47945205479452, 5.47945205479452,
     5.487804878048781, 5.542725173210162, 5.555555555555555, 5.555555555555555, 5.555555555555555, 5.590062111801243,
     5.625, 5.6634304207119746, 5.7685664939550945, 5.771905424200279, 5.847953216374268, 5.970149253731343,
     5.970149253731343, 5.9760956175298805, 6.0, 6.0606060606060606, 6.094182825484765, 6.11353711790393,
     6.137184115523466, 6.153846153846154, 6.164129223913851, 6.206896551724138, 6.21301775147929, 6.222222222222222,
     6.25, 6.288819875776397, 6.312769010043041, 6.349206349206349, 6.349206349206349, 6.382978723404255,
     6.382978723404255, 6.4, 6.451612903225806, 6.466951973371374, 6.504065040650407, 6.51685393258427,
     6.613404349755882, 6.622516556291391, 6.628895184135978, 6.63265306122449, 6.666666666666667, 6.666666666666667,
     6.666666666666667, 6.666666666666667, 6.666666666666667, 6.666666666666667, 6.676449009537784, 6.741573033707865,
     6.756756756756757, 6.7669172932330826, 6.8181818181818175, 6.8181818181818175, 6.8181818181818175,
     6.8493150684931505, 6.896551724137931, 6.896551724137931, 7.000000000000001, 7.007125890736342, 7.0588235294117645,
     7.1065989847715745, 7.118644067796611, 7.142857142857142, 7.142857142857142, 7.142857142857142, 7.2727272727272725,
     7.281553398058252, 7.4074074074074066, 7.43801652892562, 7.6073619631901845, 7.6923076923076925,
     7.6923076923076925, 7.777777777777778, 7.8125, 7.954545454545454, 7.967528562838244, 8.0, 8.065532451165721,
     8.108108108108109, 8.108108108108109, 8.200000000000001, 8.208955223880597, 8.22285919025439, 8.235294117647058,
     8.260325406758447, 8.333333333333332, 8.333333333333332, 8.333333333333332, 8.396946564885496, 8.426073131955485,
     8.494125256009486, 8.590502582189192, 8.620689655172415, 8.695652173913043, 8.695652173913043, 8.695652173913043,
     8.704663212435234, 8.764940239043826, 8.78623188405797, 8.817427385892117, 8.823529411764707, 8.823529411764707,
     8.823529411764707, 8.928571428571429, 8.970672800460035, 8.974358974358974, 8.984375, 9.027777777777777,
     9.034397016162453, 9.040590405904059, 9.090909090909092, 9.090909090909092, 9.090909090909092, 9.15492957746479,
     9.210526315789473, 9.215686274509805, 9.322033898305085, 9.424920127795527, 9.523809523809524, 9.523809523809524,
     9.580838323353294, 9.714285714285714, 9.859154929577464, 9.98248686514886, 10.0, 10.0, 10.0, 10.0,
     10.028449502133713, 10.105448154657294, 10.344827586206897, 10.416666666666668, 10.526315789473683,
     10.550458715596331, 10.638297872340425, 10.702524698133917, 10.714285714285714, 10.828025477707007,
     10.909090909090908, 10.9375, 10.9375, 11.004784688995215, 11.054421768707483, 11.11111111111111, 11.11111111111111,
     11.11111111111111, 11.11111111111111, 11.11111111111111, 11.214953271028037, 11.428571428571429,
     11.458333333333332, 11.515151515151516, 11.570247933884298, 11.76470588235294, 11.76470588235294,
     11.812627291242363, 11.904761904761903, 11.911111111111111, 11.940298507462686, 12.0, 12.02435312024353,
     12.121212121212121, 12.202852614896988, 12.307692307692308, 12.5, 12.560386473429952, 12.676056338028168,
     12.82051282051282, 12.851405622489958, 12.962962962962962, 13.043478260869565, 13.079019073569482,
     13.114754098360656, 13.253012048192772, 13.580246913580247, 13.588850174216027, 13.596491228070176,
     13.636363636363635, 13.636363636363635, 13.728323699421965, 13.903743315508022, 14.149908592321756,
     14.17910447761194, 14.17910447761194, 14.213197969543149, 14.244186046511627, 14.285714285714285,
     14.285714285714285, 14.285714285714285, 14.285714285714285, 14.285714285714285, 14.285714285714285,
     14.334911752044768, 14.37908496732026, 14.545454545454545, 14.731369150779896, 14.814814814814813,
     14.818763326226012, 14.920634920634921, 15.151515151515152, 15.151515151515152, 15.384615384615385,
     15.384615384615385, 15.384615384615385, 15.550755939524837, 15.555555555555555, 16.0, 16.129032258064516,
     16.16766467065868, 16.216216216216218, 16.25, 16.387337057728118, 16.400000000000002, 16.50485436893204,
     16.666666666666664, 16.666666666666664, 16.666666666666664, 16.666666666666664, 16.666666666666664,
     16.666666666666664, 16.666666666666664, 16.831683168316832, 16.859122401847575, 16.920152091254753,
     17.09090909090909, 17.105263157894736, 17.322097378277153, 17.5, 17.5, 17.5, 17.543859649122805,
     17.557251908396946, 17.857142857142858, 18.0327868852459, 18.115942028985508, 18.181818181818183,
     18.367346938775512, 18.446601941747574, 18.51851851851852, 18.99265477439664, 19.130434782608695,
     19.346405228758172, 19.35483870967742, 19.444444444444446, 19.565217391304348, 20.0, 20.0, 20.0, 20.0, 20.0,
     20.14388489208633, 20.155038759689923, 20.321931589537222, 20.33898305084746, 20.833333333333336,
     21.29032258064516, 21.428571428571427, 21.453287197231834, 21.6, 21.608040201005025, 21.686746987951807, 21.875,
     21.966794380587483, 21.97908064960088, 22.0, 22.22222222222222, 22.413793103448278, 22.5, 23.383084577114428,
     24.104234527687296, 24.127764127764127, 24.242424242424242, 24.29718875502008, 24.871531346351492, 25.0, 25.0,
     25.0, 25.238095238095237, 25.263157894736842, 25.287356321839084, 25.423728813559322, 25.547445255474454, 26.25,
     26.44415917843389, 26.666666666666668, 26.71118530884808, 26.8018018018018, 26.849894291754755, 27.77777777777778,
     28.57142857142857, 28.57142857142857, 28.57142857142857, 28.64651773981603, 29.166666666666668, 29.47882736156352,
     29.577464788732392, 29.615384615384617, 30.0, 30.41095890410959, 30.76923076923077, 30.952380952380953,
     32.27665706051873, 32.340425531914896, 33.33333333333333, 33.33333333333333, 33.33333333333333, 33.33333333333333,
     33.33333333333333, 33.33333333333333, 33.465588280177016, 34.12162162162162, 35.55555555555556, 35.714285714285715,
     35.8600583090379, 36.36363636363637, 36.81592039800995, 37.5, 37.5, 38.46153846153847, 38.46153846153847, 40.0,
     40.0, 40.0, 40.0, 40.74074074074074, 40.76923076923077, 40.83916083916084, 41.46341463414634, 41.74174174174174,
     41.878172588832484, 42.151162790697676, 42.857142857142854, 42.857142857142854, 42.857142857142854,
     42.99065420560748, 44.656488549618324, 46.34146341463415, 48.78048780487805, 50.0, 54.761904761904766,
     58.879023307436185, 62.31751824817518, 62.5, 65.0, 65.0, 66.66666666666666, 73.52941176470588, 77.77777777777779,
     80.0, 93.33333333333333, 100.0, 100.0, 100.0]

    print(percent_count)
    print(len(percent_count))
    data_group(percent_count, 1)


# project_library_rq1()
library_project_rq1()
# top_category_rq1()
# library_project_category_rq1(3)
# no_update_library_rq3()
# no_update_project_rq3()
# gap_rq3()
# update_down_rq3()
# top_library_rq1()
# gap_by_project_rq3()
# gap_by_library_rq3()
# library_change_distribution_rq3()
# project_percent_rq3()
# library_percent_rq3()